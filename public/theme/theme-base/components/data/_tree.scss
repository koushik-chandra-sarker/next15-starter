@use "sass:color";
@use "sass:list";
@use "../../../themes/tailwind/tailwind-light/variables";
@use "../../mixins";

// core
.p-tree-container {
	margin: 0;
	padding: 0;
	list-style-type: none;
	overflow: auto;
}

.p-treenode-children {
	margin: 0;
	padding: 0;
	list-style-type: none;
}

.p-treenode-selectable {
	cursor: pointer;
	user-select: none;
}

.p-tree-toggler {
	cursor: pointer;
	user-select: none;
	display: inline-flex;
	align-items: center;
	justify-content: center;
	overflow: hidden;
	position: relative;
	flex-shrink: 0;
}

.p-treenode-leaf > .p-treenode-content .p-tree-toggler {
	visibility: hidden;
}

.p-treenode-content {
	display: flex;
	align-items: center;
}

.p-tree-filter {
	width: 100%;
}

.p-tree-filter-container {
	position: relative;
	display: block;
	width: 100%;
}

.p-tree-filter-icon {
	position: absolute;
	top: 50%;
	margin-top: -0.5rem;
}

.p-tree-loading {
	position: relative;
	min-height: 4rem;
}

.p-tree .p-tree-loading-overlay {
	position: absolute;
	z-index: 1;
	display: flex;
	align-items: center;
	justify-content: center;
}

// TODO: Should be removed after implementing the new scrollable prop to Tree
// .p-tree-flex-scrollable {
//     display: flex;
//     flex: 1;
//     height: 100%;
//     flex-direction: column;
// }

// .p-tree-flex-scrollable .p-tree-wrapper {
//     flex: 1;
// }

// theme
.p-tree {
	border: variables.$panelContentBorder;
	background: variables.$panelContentBg;
	color: variables.$panelContentTextColor;
	padding: variables.$panelContentPadding;
	border-radius: variables.$borderRadius;

	.p-tree-container {
			.p-treenode {
					padding: variables.$treeNodePadding;
					outline: 0 none;

					&:focus > .p-treenode-content {
							@include mixins.focused-listitem();
					}

					.p-treenode-content {
							border-radius: variables.$borderRadius;
							transition: variables.$listItemTransition;
							padding: variables.$treeNodeContentPadding;

							.p-tree-toggler {
									margin-right: variables.$inlineSpacing;
									@include mixins.action-icon();
							}

							.p-treenode-icon {
									margin-right: variables.$inlineSpacing;
									color: variables.$treeNodeIconColor;
							}

							.p-checkbox {
									margin-right: variables.$inlineSpacing;

									&.p-indeterminate {
											.p-checkbox-icon {
													color: variables.$textColor;
											}
									}
							}

							&.p-highlight {
									background: variables.$highlightBg;
									color: variables.$highlightTextColor;

									.p-tree-toggler,
									.p-treenode-icon {
											color: variables.$highlightTextColor;

											&:hover {
													color: variables.$highlightTextColor;
											}
									}
							}

							&.p-treenode-selectable:not(.p-highlight):hover {
									background: variables.$inputListItemHoverBg;
									color: variables.$inputListItemTextHoverColor;
							}

							&.p-treenode-dragover {
								background: variables.$inputListItemHoverBg;
								color: variables.$inputListItemTextHoverColor;
							}
					}
			}
	}

	.p-tree-filter-container {
			margin-bottom: variables.$inlineSpacing;

			.p-tree-filter {
					width: 100%;
					padding-right: list.nth(variables.$inputPadding, 2) + variables.$primeIconFontSize;
			}

			.p-tree-filter-icon {
					right: list.nth(variables.$inputPadding, 2);
					color: variables.$inputIconColor;
			}
	}

	.p-treenode-children {
			padding: variables.$treeNodeChildrenPadding;
	}

	.p-tree-loading-icon {
			font-size: variables.$loadingIconFontSize;

			&.p-icon {
					width:  variables.$loadingIconFontSize;
					height: variables.$loadingIconFontSize;
			}
	}

	.p-treenode-droppoint {
		height: variables.$inlineSpacing;

		&.p-treenode-droppoint-active {
			background: color.scale(variables.$highlightBg, $lightness: -20%);
		}
	}
}
